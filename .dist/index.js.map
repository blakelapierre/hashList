{"version":3,"names":[],"mappings":"","sources":["index.js"],"sourcesContent":["module.exports = function HashList(idProperty) {\n  // A HashList stores data in both an array, and a dictionary/hashmap\n  // We do this\n  const list = [],\n      hash = {};\n\n  idProperty = idProperty || '_self';\n\n  if (idProperty == '_self') {\n    this.push = function(obj) {\n      list.push(obj);\n      hash[obj] = {\n        id: obj,\n        index: list.length - 1,\n        obj: obj\n      };\n    };\n\n    this.removeObject = function(obj) {\n      this.removeByID(obj);\n    };\n\n    this.removeByID = function(id) {\n      const hObj = hash[id];\n\n      if (hObj === undefined) return;\n\n      list.splice(hObj.index, 1);\n      delete hash[id];\n\n      const length = list.length;\n      for (let i = hObj.index; i < length; i++) {\n        hash[list[i]].index = i;\n      }\n    };\n  }\n  else if (idProperty) {\n    this.push = function(obj) {\n      list.push(obj);\n      hash[obj[idProperty]] = {\n        id: obj[idProperty],\n        index: list.length - 1,\n        obj: obj\n      };\n    };\n\n    this.removeObject = function(obj) {\n      const id = obj[idProperty];\n      this.removeByID(id);\n    };\n\n    this.removeByID = function(id) {\n      const hObj = hash[id];\n\n      if (hObj === undefined) return;\n\n      list.splice(hObj.index, 1);\n      delete hash[id];\n\n      const length = list.length;\n      for (let i = hObj.index; i < length; i++) {\n        const obj = hash[list[i][idProperty]];\n\n        if (obj === undefined) console.log('uh oh');\n        else obj.index = i;\n      }\n    };\n  }\n\n  this.length = function() {\n    return list.length;\n  };\n\n  this.getByID = function(id) {\n    const record = hash[id];\n    return record ? record.obj : undefined;\n  };\n\n  this.indexOf = function(id) {\n    const record = hash[id];\n\n    return record ? record.index : -1;\n  };\n\n  this.at = function(index) {\n    return list[index];\n  };\n\n  this.asList = function() {\n    return list;\n  };\n\n  this.asHash = function() {\n    return hash;\n  };\n\n  this.forEach = function(fn) {\n    const {length} = list;\n    for (let i = 0; i < length; i++) fn(list[i]);\n  };\n};"],"file":"index.js","sourceRoot":"/source/"}